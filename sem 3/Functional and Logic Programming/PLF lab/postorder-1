;postorder 1
(defun leftTree (tree n m)
(cond 
 ((null tree) nil)
 ((> n m) nil)
 (t (append (list (car tree) (cadr tree))
            (leftTree (cddr tree) (+ n 1) (+ m (cadr tree)))))))

(defun rightTree(tree n m)
  (cond 
((null tree) nil)
((> n m) tree)
(t (rightTree (cddr tree) (+ n 1) (+ m (cadr tree))))))

(defun postorder (tree)
  (cond 
   ((null tree) nil)
   (t (append (postorder (leftTree (cddr tree) 0 0))
              (postorder (rightTree (cddr tree) 0 0 ))
              (list (car tree))
))
))

(defun preorder (tree)
(cond
((null tree) nil)
(t (append (list (car tree))
           (preorder (leftTree (cddr tree) 0 0 ))
           (preorder (rightTree (cddr tree) 0 0 ))
))))

(defun inorder (tree)
(cond
((null tree) nil)
(t (append (inorder (leftTree (cddr tree) 0 0 ))
           (list (car tree))
           (inorder (rightTree (cddr tree) 0 0 ))
))
))

(defun path (tree l x)
(cond
((null tree ) nil)
((equal x (car tree)) (reverse (cons (car tree) l)))
(t 
(append (path (leftTree (cddr tree) 0 0) (cons (car tree ) l) x)
        (path (rightTree (cddr tree) 0 0) (cons (car tree) l ) x)
))
))


(write(path '(a 2 b 1 c 0 d 1 e 0 f 0)'nil'f))